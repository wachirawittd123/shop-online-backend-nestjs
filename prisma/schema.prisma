generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String
  phone               String?
  name                String
  picture             String?
  role                String   @default("consumer")
  verify              UserVerify? @relation("UserToUserVerify")
  verifyId            String?     @unique
  creditNotification  UserCreditNotification? @relation("UserCreditNotification")
  notification        Boolean @default(false)
  allNotification     Boolean @default(false)
  method              String?
  status              String
  google              Json?
  facebook            Json?
  provider            String
  creditBalance       Float @default(0)
  creditPeriod        DateTime?
  consumersId         String?
  salt                String?
  token               String?
  rtoken              String?
  ftoken              String?
  gtoken              String?
  pwExpiredOn         DateTime?
  createdBy           String?
  updatedBy           String?
  createdOn           DateTime @default(now())
  updatedOn           DateTime @updatedAt
  taxName             String?
  taxNo               String?
  taxAddress          String?
  profileImage        String?
  faceCompanyName     String?
  faceCompanyPassword String?
  profile             Json?
  signtoken           Json?
  credit              Json?
  subscription        Boolean @default(false)
  type                String?
  originCreditBalance Float?
  createdAt           DateTime @default(now())
  createdCategories   Category[] @relation("CreatedCategories")
  updatedCategories   Category[] @relation("UpdatedCategories")
  createdServices     Service[]  @relation("CreatedServices")
  updatedServices     Service[]  @relation("UpdatedServices")
  createdPricings     Pricing[]  @relation("CreatedPricings")
  updatedPricings     Pricing[]  @relation("UpdatedPricings")
}

model UserVerify {
  id     String   @id @default(uuid())
  status Boolean @default(false)
  code   String
  user   User?    @relation("UserToUserVerify", fields: [userId], references: [id])
  userId String?  @unique
}

model UserCreditNotification {
  id       String @id @default(uuid())
  credit   Float
  lastSent DateTime
  user     User   @relation("UserCreditNotification", fields: [id], references: [id])
}

model Category {
  id             String   @id @default(uuid()) // Generates UUID for PostgreSQL
  categoriesName String   @unique  // String does not need @db.String
  createdOn      DateTime @default(now())
  updatedOn      DateTime @updatedAt  // Automatically updates timestamp
  createdBy      String?  
  updatedBy      String?  
  services       Service[] @relation("CategoryToService")
  createdByUser  User? @relation("CreatedCategories", fields: [createdBy], references: [id])
  updatedByUser  User? @relation("UpdatedCategories", fields: [updatedBy], references: [id])
}

model Service {
  id                  String   @id @default(uuid())
  name                String
  apiCategoriesId     String   // Foreign Key to Category (ไม่ต้อง @unique)
  category            Category? @relation("CategoryToService", fields: [apiCategoriesId], references: [id]) // One-to-Many
  price               Float?
  description         String?
  description_EN      String?
  order               Int?
  urlPath             String?
  useCaseDetail1      String?
  useCaseDetail1_EN   String?
  useCaseDetail2      String?
  useCaseDetail2_EN   String?
  useCaseDetail3      String?
  useCaseDetail3_EN   String?
  useCaseImagePath    String?
  imagePath           String?
  createdOn           DateTime? @default(now())
  updatedOn           DateTime? @updatedAt
  createdBy           String?  
  updatedBy           String?  
  docsUrl             String?
  isFeaturedProducts  Boolean? @default(false)
  icon                String?
  createdByUser       User? @relation("CreatedServices", fields: [createdBy], references: [id])
  updatedByUser       User? @relation("UpdatedServices", fields: [updatedBy], references: [id])
  endpoints           Endpoint[] @relation("ServiceToEndpoint")
}

model Endpoint {
  id               String   @id @default(uuid())
  apiServiceId     String?
  name             String
  description      String?
  requestUrl       String
  isActive         Boolean? @default(true)
  requestMethod    String?
  creditPerRequest Float?
  createdOn        DateTime?
  updatedOn        DateTime?
  createdBy        String?
  updatedBy        String?
  order            Int?
  productName      String?
  service          Service? @relation("ServiceToEndpoint", fields: [apiServiceId], references: [id])
}

model Pricing {
  id            String   @id @default(uuid())
  icPerPrice    Float
  validatePeriod Int
  min           Float
  max           Float
  createdOn     DateTime @default(now())
  updatedOn     DateTime @updatedAt
  createdBy     String?  
  updatedBy     String?
  createdByUser  User? @relation("CreatedPricings", fields: [createdBy], references: [id])
  updatedByUser  User? @relation("UpdatedPricings", fields: [updatedBy], references: [id])
}
